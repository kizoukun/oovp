/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package GUI01.Project.Admin;

import GUI01.Project.*;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.util.List;
import java.util.Optional;

/**
 *
 * @author rezab
 */
public class GamesInternalFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form GamesInternalFrame
     */

    private MouseAdapter mouseAdapter = null;
    public GamesInternalFrame() {
        initComponents();
        this.loadGame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        newGameBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setClosable(true);
        setResizable(true);
        setTitle("Admin Game");

        newGameBtn.setText("Add New Game");
        newGameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameBtnActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(newGameBtn))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 451, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newGameBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newGameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameBtnActionPerformed
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));
        panel.add(new JLabel("Game Name:"));
        JTextField gameNameText = new JTextField();
        panel.add(gameNameText);
        panel.add(new JLabel("Game Image:"));
        JTextField gameImageText = new JTextField();
        panel.add(gameImageText);
        panel.add(new JLabel("Game Price:"));
        JTextField gamePriceText = new JTextField();
        panel.add(gamePriceText);

        int result = JOptionPane.showConfirmDialog(null, panel, "Add New Game", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(result != JOptionPane.OK_OPTION) return;
        String gameName = gameNameText.getText();
        String gameImage = gameImageText.getText().length() < 1 ? null : gameImageText.getText();
        String gamePriceString = gamePriceText.getText();
        if(gameName.length() < 1 || gamePriceString.length() < 1) {
            Alert.showMessageError(null, "Game Name and Game Price must be filled");
            return;
        }
        int gamePrice = 0;
        try {
            gamePrice = Integer.parseInt(gamePriceString);
        } catch (NumberFormatException e) {
            Alert.showMessageError(null, "Game Price must be a number");
            return;
        }
        try {
            Main.gamesDb.addGame(gameName, gameImage, gamePrice);
            this.reloadAction();
            Alert.showMessageSuccess("Game added successfully");
        } catch (SQLException e) {
            Utils.debugLog("Failed to add new game on admin: " + e.getMessage());
        }

    }//GEN-LAST:event_newGameBtnActionPerformed

    private void loadGame() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // make all cells non-editable
            }
        };
        model.addColumn("Name");
        model.addColumn("Image URL");
        model.addColumn("Price");
        model.addColumn("Edit");
        model.addColumn("Remove");
        Optional<List<GameObject>> games = Main.gamesDb.getGames();
        if(!games.isPresent()) return;
        for(GameObject game : games.get()) {
            model.addRow(new Object[]{
                    game.getTitle(),
                    game.getImage(),
                    Utils.formatNumber(game.getPrice()),
                    "Edit",
                    "Remove"
            });
        }
        jTable1.setModel(model);
        if(mouseAdapter != null) {
            jTable1.removeMouseListener(mouseAdapter);
        }
        mouseAdapter = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int row = jTable1.rowAtPoint(e.getPoint());
                int col = jTable1.columnAtPoint(e.getPoint());
                if (row >= 0 && col >= 0) {
                    if (col == 3) {
                        editAction(games.get().get(row));
                    } else if (col == 4) {
                        removeAction(games.get().get(row));
                    }
                }
            }
        };
        jTable1.addMouseListener(mouseAdapter);
        jTable1.getColumnModel().getColumn(3).setCellRenderer(new ButtonRenderer());
        jTable1.getColumnModel().getColumn(3).setCellEditor(new ButtonEditor(new JCheckBox()));
        jTable1.getColumnModel().getColumn(4).setCellRenderer(new ButtonRenderer());
        jTable1.getColumnModel().getColumn(4).setCellEditor(new ButtonEditor(new JCheckBox()));
    }

    public void editAction(GameObject game) {
        // edit
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));
        panel.add(new JLabel("Game Name:"));
        JTextField gameNameText = new JTextField();
        gameNameText.setText(game.getTitle());
        panel.add(gameNameText);
        panel.add(new JLabel("Game Image:"));
        JTextField gameImageText = new JTextField();
        gameImageText.setText(game.getImage());
        panel.add(gameImageText);
        panel.add(new JLabel("Game Price:"));
        JTextField gamePriceText = new JTextField();
        gamePriceText.setText(String.valueOf((int)game.getPrice()));
        panel.add(gamePriceText);

        int result = JOptionPane.showConfirmDialog(null, panel, "Edit Game", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result != JOptionPane.OK_OPTION) return;
        String gameName = gameNameText.getText();
        String gameImage = gameImageText.getText().length() < 1 ? null : gameImageText.getText();
        String gamePriceString = gamePriceText.getText();
        if (gameName.length() < 1 || gamePriceString.length() < 1) {
            Alert.showMessageError(null, "Game Name and Game Price must be filled");
            return;
        }
        int gamePrice = 0;
        try {
            gamePrice = Integer.parseInt(gamePriceString);
        } catch (NumberFormatException ex) {
            Alert.showMessageError(null, "Game Price must be a number");
            return;
        }
        try {
            Main.gamesDb.editGame(game.getId(), gameName, gameImage, gamePrice);
            this.reloadAction();
            Alert.showMessageSuccess("Game edited successfully");
        } catch (SQLException ex) {
            Utils.debugLog("Failed to edit game on admin: " + ex.getMessage());
        }
    }

    private void removeAction(GameObject game) {
        // remove
        int result = JOptionPane.showConfirmDialog(null, "Are you sure to remove this game?", "Remove Game", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if (result != JOptionPane.OK_OPTION) return;
        try {
            Main.gamesDb.deleteGame(game.getId());
            this.reloadAction();
            Alert.showMessageSuccess("Game removed successfully");
        } catch (SQLException ex) {
            Utils.debugLog("Failed to remove game on admin: " + ex.getMessage());
        }
    }

    public void reloadAction() {
        this.loadGame();
        Main.mainStatic.loadGame();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton newGameBtn;
    // End of variables declaration//GEN-END:variables
}

class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setOpaque(true);
    }

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        setText((value == null) ? "" : value.toString());
        return this;
    }
}

class ButtonEditor extends DefaultCellEditor {
    protected JButton button;
    private String label;
    private boolean isPushed;

    public ButtonEditor(JCheckBox checkBox) {
        super(checkBox);
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(e -> fireEditingStopped());
    }

    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        if (isSelected) {
            button.setForeground(table.getSelectionForeground());
            button.setBackground(table.getSelectionBackground());
        } else {
            button.setForeground(table.getForeground());
            button.setBackground(table.getBackground());
        }
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
    }

    public Object getCellEditorValue() {
        if (isPushed) {
            // Perform the button action here
            JOptionPane.showMessageDialog(button, label + " button clicked!");
        }
        isPushed = false;
        return label;
    }

    public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
    }

    protected void fireEditingStopped() {
        super.fireEditingStopped();
    }
}